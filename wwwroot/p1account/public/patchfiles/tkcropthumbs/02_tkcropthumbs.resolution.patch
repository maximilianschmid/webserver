Index: typo3conf/ext/tkcropthumbs/class.ux_t3lib_tceforms.php
===================================================================
--- typo3conf/ext/tkcropthumbs/class.ux_t3lib_tceforms.php	(revision 90)
+++ typo3conf/ext/tkcropthumbs/class.ux_t3lib_tceforms.php	(working copy)
@@ -118,13 +118,11 @@
 						$relPath = t3lib_extMgm::extRelPath('tkcropthumbs');
 						
 						$imgs[] = '<span class="nobr">
-							<a href="#" onclick="window.open(\''
-								. 'mod.php?M=tkcropthumbs_crop&image=' . $config['uploadfolder'] . '/' . $imgP[0]
-								. '&uid=' . $row[uid] . '&aspectratio=' . $row['tx_tkcropthumbs_aspectratio'] . '\',\'tkcropthumbs' . rand(0, 1000000)
-								. '\',\'height=620,width=820,status=0,menubar=0,scrollbars=0\');return false;" style="position: relative;">
-								<div style="position:absolute; margin: auto; width: 56px;"><img src="'. $relPath . 'res/icons/crop.png" title="'.$fI['basename'].'"></div>'
+							<a href="#" onclick="javascript:return false;" style="position: relative; cursor:default;">'
 						. $this->croppedThumbs($rowCopy, $table, $field, $this->backPath, 'thumbs.php', $config['uploadfolder'], 0, ' align="middle"')
-								. '</a></span>';							
+								. '</a></span>';	
+                
+                						
 						}
 					}
 					$thumbsnail = implode('<br />', $imgs);
Index: typo3conf/ext/tkcropthumbs/class.ux_tx_dam_tcefunc.php
===================================================================
--- typo3conf/ext/tkcropthumbs/class.ux_tx_dam_tcefunc.php	(revision 90)
+++ typo3conf/ext/tkcropthumbs/class.ux_tx_dam_tcefunc.php	(working copy)
@@ -260,7 +260,8 @@
 						. "&uid=" . $uid . "&aspectratio=" . $PA[row][tx_tkcropthumbs_aspectratio] . "','tkcropthumbs" . rand(0, 1000000)
 						. "','height=620,width=820,status=0,menubar=0,scrollbars=0');return false;\"><img src=\""
 						. $relPath . "res/icons/crop_dam.png\" border=\"0\" /></a>";
-
+        
+        $croplink = "";
 
 				if ($displayThumbs) {
 					$lines[] = '
Index: typo3conf/ext/tkcropthumbs/class.ux_tslib_cObj.php
===================================================================
--- typo3conf/ext/tkcropthumbs/class.ux_tslib_cObj.php	(revision 90)
+++ typo3conf/ext/tkcropthumbs/class.ux_tslib_cObj.php	(working copy)
@@ -29,275 +29,283 @@
  */
 class ux_tslib_cObj extends tslib_cObj {
 
-	/**
-	 * Returns a <img> tag with the image file defined by $file and processed according to the properties in the TypoScript array.
-	 * Mostly this function is a sub-function to the IMAGE function which renders the IMAGE cObject in TypoScript.
-	 * This function is called by "$this->cImage($conf['file'],$conf);" from IMAGE().
-	 *
-	 * @param	string		File TypoScript resource
-	 * @param	array		TypoScript configuration properties
-	 * @return	string		<img> tag, (possibly wrapped in links and other HTML) if any image found.
-	 * @access private
-	 * @see IMAGE()
-	 */
-	function cImage($file, $conf) {
-		// tkcropthumbs values
-		$tkcropthumbs = array();
-		$tkcropthumbs['hash'] = t3lib_div::shortMD5($this->data[tx_tkcropthumbs_aspectratio] . $this->data[tx_tkcropthumbs_cropvalues]);
-		$tkcropthumbs['aspectratio'] = $this->data[tx_tkcropthumbs_aspectratio];
-		$tkcropthumbs['cropvalues'] = $this->data[tx_tkcropthumbs_cropvalues];
-		$info = $this->getImgResource($file, $conf['file.'], $tkcropthumbs);
+  /**
+   * Returns a <img> tag with the image file defined by $file and processed according to the properties in the TypoScript array.
+   * Mostly this function is a sub-function to the IMAGE function which renders the IMAGE cObject in TypoScript.
+   * This function is called by "$this->cImage($conf['file'],$conf);" from IMAGE().
+   *
+   * @param string    File TypoScript resource
+   * @param array   TypoScript configuration properties
+   * @return  string    <img> tag, (possibly wrapped in links and other HTML) if any image found.
+   * @access private
+   * @see IMAGE()
+   */
+  function cImage($file, $conf) {
+    // tkcropthumbs values
+    $tkcropthumbs = array();
+    $tkcropthumbs['hash'] = t3lib_div::shortMD5($this->data[tx_tkcropthumbs_aspectratio] . $this->data[tx_tkcropthumbs_cropvalues]);
+    $tkcropthumbs['aspectratio'] = $this->data[tx_tkcropthumbs_aspectratio];
+    $tkcropthumbs['resolution'] = isset($conf['file.']['resolution']) ? $this->stdWrap($conf['file.']['resolution'], $conf['file.']['resolution.']) : $conf['file.']['resolution'];
+    $tkcropthumbs['cropvalues'] = $this->data[tx_tkcropthumbs_cropvalues];
+    $info = $this->getImgResource($file, $conf['file.'], $tkcropthumbs);
+
+    $GLOBALS['TSFE']->lastImageInfo = $info;
+    if (is_array($info)) {
+      $info[3] = t3lib_div::png_to_gif_by_imagemagick($info[3]);
+      $GLOBALS['TSFE']->imagesOnPage[] = $info[3]; // This array is used to collect the image-refs on the page...
+      // Backwards compatibility if altText is not set and alttext is set
+      // @deprecated since TYPO3 4.3, will be removed in TYPO3 4.6
+      if (strlen($conf['alttext']) || is_array($conf['alttext.'])) {
+        $GLOBALS['TSFE']->logDeprecatedTyposcript(
+            'IMAGE.alttext', 'use IMAGE.altText instead - src: ' . $info[3] . ' - original image: ' . $info['origFile']
+        );
+        if (!strlen($conf['altText']) && !is_array($conf['altText.'])) {
+          $conf['altText'] = $conf['alttext'];
+          $conf['altText.'] = $conf['alttext.'];
+        }
+      }
 
-		$GLOBALS['TSFE']->lastImageInfo = $info;
-		if (is_array($info)) {
-			$info[3] = t3lib_div::png_to_gif_by_imagemagick($info[3]);
-			$GLOBALS['TSFE']->imagesOnPage[] = $info[3]; // This array is used to collect the image-refs on the page...
-			// Backwards compatibility if altText is not set and alttext is set
-			// @deprecated since TYPO3 4.3, will be removed in TYPO3 4.6
-			if (strlen($conf['alttext']) || is_array($conf['alttext.'])) {
-				$GLOBALS['TSFE']->logDeprecatedTyposcript(
-						'IMAGE.alttext', 'use IMAGE.altText instead - src: ' . $info[3] . ' - original image: ' . $info['origFile']
-				);
-				if (!strlen($conf['altText']) && !is_array($conf['altText.'])) {
-					$conf['altText'] = $conf['alttext'];
-					$conf['altText.'] = $conf['alttext.'];
-				}
-			}
+      $altParam = $this->getAltParam($conf);
+      if ($conf['params'] && !isset($conf['params.'])) {
+        $params = ' ' . $conf['params'];
+      } else {
+        $params = isset($conf['params.']) ? ' ' . $this->stdWrap($conf['params'], $conf['params.']) : '';
+      }
+      $theValue = '<img src="' . htmlspecialchars($GLOBALS['TSFE']->absRefPrefix .
+              t3lib_div::rawUrlEncodeFP($info[3])) . '" width="' . $info[0] . '" height="' . $info[1] . '"' .
+          $this->getBorderAttr(' border="' . intval($conf['border']) . '"') .
+          $params .
+          ($altParam) . ' />';
+      $linkWrap = isset($conf['linkWrap.']) ? $this->stdWrap($conf['linkWrap'], $conf['linkWrap.']) : $conf['linkWrap'];
+      if ($linkWrap) {
+        $theValue = $this->linkWrap($theValue, $linkWrap);
+      } elseif ($conf['imageLinkWrap']) {
+        $theValue = $this->imageLinkWrap($theValue, $info['origFile'], $conf['imageLinkWrap.']);
+      }
+      $wrap = isset($conf['wrap.']) ? $this->stdWrap($conf['wrap'], $conf['wrap.']) : $conf['wrap'];
+      if ($wrap) {
+        $theValue = $this->wrap($theValue, $conf['wrap']);
+      }
+      return $theValue;
+    }
+  }
 
-			$altParam = $this->getAltParam($conf);
-			if ($conf['params'] && !isset($conf['params.'])) {
-				$params = ' ' . $conf['params'];
-			} else {
-				$params = isset($conf['params.']) ? ' ' . $this->stdWrap($conf['params'], $conf['params.']) : '';
-			}
-			$theValue = '<img src="' . htmlspecialchars($GLOBALS['TSFE']->absRefPrefix .
-							t3lib_div::rawUrlEncodeFP($info[3])) . '" width="' . $info[0] . '" height="' . $info[1] . '"' .
-					$this->getBorderAttr(' border="' . intval($conf['border']) . '"') .
-					$params .
-					($altParam) . ' />';
-			$linkWrap = isset($conf['linkWrap.']) ? $this->stdWrap($conf['linkWrap'], $conf['linkWrap.']) : $conf['linkWrap'];
-			if ($linkWrap) {
-				$theValue = $this->linkWrap($theValue, $linkWrap);
-			} elseif ($conf['imageLinkWrap']) {
-				$theValue = $this->imageLinkWrap($theValue, $info['origFile'], $conf['imageLinkWrap.']);
-			}
-			$wrap = isset($conf['wrap.']) ? $this->stdWrap($conf['wrap'], $conf['wrap.']) : $conf['wrap'];
-			if ($wrap) {
-				$theValue = $this->wrap($theValue, $conf['wrap']);
-			}
-			return $theValue;
-		}
-	}
+  /**
+   * Creates and returns a TypoScript "imgResource".
+   * The value ($file) can either be a file reference (TypoScript resource) or the string "GIFBUILDER".
+   * In the first case a current image is returned, possibly scaled down or otherwise processed.
+   * In the latter case a GIFBUILDER image is returned; This means an image is made by TYPO3 from layers of elements as GIFBUILDER defines.
+   * In the function IMG_RESOURCE() this function is called like $this->getImgResource($conf['file'],$conf['file.']);
+   *
+   * @param string    A "imgResource" TypoScript data type. Either a TypoScript file resource or the string GIFBUILDER. See description above.
+   * @param array   TypoScript properties for the imgResource type
+   * @param   array   tkcropthumbs
+   * @return  array   Returns info-array. info[origFile] = original file.
+   * @link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=315&cHash=63b593a934
+   * @see IMG_RESOURCE(), cImage(), tslib_gifBuilder
+   */
+  function getImgResource($file, $fileArray, $tkcropthumbs = NULL) {
+    if (is_array($fileArray)) {
+      switch ($file) {
+        case 'GIFBUILDER' :
+          $gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
+          $gifCreator->init();
+          $theImage = '';
+          if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib']) {
+            $gifCreator->start($fileArray, $this->data);
+            $theImage = $gifCreator->gifBuild();
+          }
+          $imageResource = $gifCreator->getImageDimensions($theImage);
+          break;
+        default :
+          if ($fileArray['import.']) {
+            $ifile = $this->stdWrap('', $fileArray['import.']);
+            if ($ifile) {
+              $file = $fileArray['import'] . $ifile;
+            }
+          }
+          $theImage = $GLOBALS['TSFE']->tmpl->getFileName($file);
+          if ($theImage) {
+            $fileArray['width'] = isset($fileArray['width.']) ? $this->stdWrap($fileArray['width'], $fileArray['width.']) : $fileArray['width'];
+            $fileArray['height'] = isset($fileArray['height.']) ? $this->stdWrap($fileArray['height'], $fileArray['height.']) : $fileArray['height'];
+            $fileArray['ext'] = isset($fileArray['ext.']) ? $this->stdWrap($fileArray['ext'], $fileArray['ext.']) : $fileArray['ext'];
+            $fileArray['maxW'] = isset($fileArray['maxW.']) ? intval($this->stdWrap($fileArray['maxW'], $fileArray['maxW.'])) : intval($fileArray['maxW']);
+            $fileArray['maxH'] = isset($fileArray['maxH.']) ? intval($this->stdWrap($fileArray['maxH'], $fileArray['maxH.'])) : intval($fileArray['maxH']);
+            $fileArray['minW'] = isset($fileArray['minW.']) ? intval($this->stdWrap($fileArray['minW'], $fileArray['minW.'])) : intval($fileArray['minW']);
+            $fileArray['minH'] = isset($fileArray['minH.']) ? intval($this->stdWrap($fileArray['minH'], $fileArray['minH.'])) : intval($fileArray['minH']);
+            $fileArray['noScale'] = isset($fileArray['noScale.']) ? $this->stdWrap($fileArray['noScale'], $fileArray['noScale.']) : $fileArray['noScale'];
 
-	/**
-	 * Creates and returns a TypoScript "imgResource".
-	 * The value ($file) can either be a file reference (TypoScript resource) or the string "GIFBUILDER".
-	 * In the first case a current image is returned, possibly scaled down or otherwise processed.
-	 * In the latter case a GIFBUILDER image is returned; This means an image is made by TYPO3 from layers of elements as GIFBUILDER defines.
-	 * In the function IMG_RESOURCE() this function is called like $this->getImgResource($conf['file'],$conf['file.']);
-	 *
-	 * @param	string		A "imgResource" TypoScript data type. Either a TypoScript file resource or the string GIFBUILDER. See description above.
-	 * @param	array		TypoScript properties for the imgResource type
-	 * @param   array		tkcropthumbs
-	 * @return	array		Returns info-array. info[origFile] = original file.
-	 * @link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=315&cHash=63b593a934
-	 * @see IMG_RESOURCE(), cImage(), tslib_gifBuilder
-	 */
-	function getImgResource($file, $fileArray, $tkcropthumbs = NULL) {
-		if (is_array($fileArray)) {
-			switch ($file) {
-				case 'GIFBUILDER' :
-					$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
-					$gifCreator->init();
-					$theImage = '';
-					if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib']) {
-						$gifCreator->start($fileArray, $this->data);
-						$theImage = $gifCreator->gifBuild();
-					}
-					$imageResource = $gifCreator->getImageDimensions($theImage);
-					break;
-				default :
-					if ($fileArray['import.']) {
-						$ifile = $this->stdWrap('', $fileArray['import.']);
-						if ($ifile) {
-							$file = $fileArray['import'] . $ifile;
-						}
-					}
-					$theImage = $GLOBALS['TSFE']->tmpl->getFileName($file);
-					if ($theImage) {
-						$fileArray['width'] = isset($fileArray['width.']) ? $this->stdWrap($fileArray['width'], $fileArray['width.']) : $fileArray['width'];
-						$fileArray['height'] = isset($fileArray['height.']) ? $this->stdWrap($fileArray['height'], $fileArray['height.']) : $fileArray['height'];
-						$fileArray['ext'] = isset($fileArray['ext.']) ? $this->stdWrap($fileArray['ext'], $fileArray['ext.']) : $fileArray['ext'];
-						$fileArray['maxW'] = isset($fileArray['maxW.']) ? intval($this->stdWrap($fileArray['maxW'], $fileArray['maxW.'])) : intval($fileArray['maxW']);
-						$fileArray['maxH'] = isset($fileArray['maxH.']) ? intval($this->stdWrap($fileArray['maxH'], $fileArray['maxH.'])) : intval($fileArray['maxH']);
-						$fileArray['minW'] = isset($fileArray['minW.']) ? intval($this->stdWrap($fileArray['minW'], $fileArray['minW.'])) : intval($fileArray['minW']);
-						$fileArray['minH'] = isset($fileArray['minH.']) ? intval($this->stdWrap($fileArray['minH'], $fileArray['minH.'])) : intval($fileArray['minH']);
-						$fileArray['noScale'] = isset($fileArray['noScale.']) ? $this->stdWrap($fileArray['noScale'], $fileArray['noScale.']) : $fileArray['noScale'];
-						$maskArray = $fileArray['m.'];
-						$maskImages = array();
-						if (is_array($fileArray['m.'])) { // Must render mask images and include in hash-calculating - else we cannot be sure the filename is unique for the setup!
-							$maskImages['m_mask'] = $this->getImgResource($maskArray['mask'], $maskArray['mask.']);
-							$maskImages['m_bgImg'] = $this->getImgResource($maskArray['bgImg'], $maskArray['bgImg.']);
-							$maskImages['m_bottomImg'] = $this->getImgResource($maskArray['bottomImg'], $maskArray['bottomImg.']);
-							$maskImages['m_bottomImg_mask'] = $this->getImgResource($maskArray['bottomImg_mask'], $maskArray['bottomImg_mask.']);
-						}
+            $fileArray['resolution'] = isset($fileArray['resolution.']) ? $this->stdWrap($fileArray['resolution'], $fileArray['resolution.']) : $fileArray['resolution'];
 
-						// tkcropthumbs add uid!!!
-						$hash = t3lib_div::shortMD5($theImage . serialize($fileArray) . serialize($maskImages) . serialize($tkcropthumbs['hash']));
-						if (!isset($GLOBALS['TSFE']->tmpl->fileCache[$hash])) {
-							$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
-							$gifCreator->init();
+            $maskArray = $fileArray['m.'];
+            $maskImages = array();
+            if (is_array($fileArray['m.'])) { // Must render mask images and include in hash-calculating - else we cannot be sure the filename is unique for the setup!
+              $maskImages['m_mask'] = $this->getImgResource($maskArray['mask'], $maskArray['mask.']);
+              $maskImages['m_bgImg'] = $this->getImgResource($maskArray['bgImg'], $maskArray['bgImg.']);
+              $maskImages['m_bottomImg'] = $this->getImgResource($maskArray['bottomImg'], $maskArray['bottomImg.']);
+              $maskImages['m_bottomImg_mask'] = $this->getImgResource($maskArray['bottomImg_mask'], $maskArray['bottomImg_mask.']);
+            }
 
-							if ($GLOBALS['TSFE']->config['config']['meaningfulTempFilePrefix']) {
-								$filename = basename($theImage);
-								// remove extension
-								$filename = substr($filename, 0, strrpos($filename, '.'));
-								// strip everything non-ascii
-								$filename = preg_replace('/[^A-Za-z0-9_-]/', '', trim($filename));
-								$gifCreator->filenamePrefix = substr($filename, 0, intval($GLOBALS['TSFE']->config['config']['meaningfulTempFilePrefix'])) . '_';
-								unset($filename);
-							}
+            // tkcropthumbs add uid!!!
+            $hash = t3lib_div::shortMD5($theImage . serialize($fileArray) . serialize($maskImages) . serialize($tkcropthumbs['hash']));
+            if (!isset($GLOBALS['TSFE']->tmpl->fileCache[$hash])) {
+              $gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
+              $gifCreator->init();
 
-							if ($fileArray['sample']) {
-								$gifCreator->scalecmd = '-sample';
-								$GLOBALS['TT']->setTSlogMessage('Sample option: Images are scaled with -sample.');
-							}
-							if ($fileArray['alternativeTempPath'] && t3lib_div::inList($GLOBALS['TYPO3_CONF_VARS']['FE']['allowedTempPaths'], $fileArray['alternativeTempPath'])) {
-								$gifCreator->tempPath = $fileArray['alternativeTempPath'];
-								$GLOBALS['TT']->setTSlogMessage('Set alternativeTempPath: ' . $fileArray['alternativeTempPath']);
-							}
+              if ($GLOBALS['TSFE']->config['config']['meaningfulTempFilePrefix']) {
+                $filename = basename($theImage);
+                // remove extension
+                $filename = substr($filename, 0, strrpos($filename, '.'));
+                // strip everything non-ascii
+                $filename = preg_replace('/[^A-Za-z0-9_-]/', '', trim($filename));
+                $gifCreator->filenamePrefix = substr($filename, 0, intval($GLOBALS['TSFE']->config['config']['meaningfulTempFilePrefix'])) . '_';
+                unset($filename);
+              }
 
-							if (!trim($fileArray['ext'])) {
-								$fileArray['ext'] = 'web';
-							}
-							$options = array();
-							if ($fileArray['maxW']) {
-								$options['maxW'] = $fileArray['maxW'];
-							}
-							if ($fileArray['maxH']) {
-								$options['maxH'] = $fileArray['maxH'];
-							}
-							if ($fileArray['minW']) {
-								$options['minW'] = $fileArray['minW'];
-							}
-							if ($fileArray['minH']) {
-								$options['minH'] = $fileArray['minH'];
-							}
-							if ($fileArray['noScale']) {
-								$options['noScale'] = $fileArray['noScale'];
-							}
+              if ($fileArray['sample']) {
+                $gifCreator->scalecmd = '-sample';
+                $GLOBALS['TT']->setTSlogMessage('Sample option: Images are scaled with -sample.');
+              }
+              if ($fileArray['alternativeTempPath'] && t3lib_div::inList($GLOBALS['TYPO3_CONF_VARS']['FE']['allowedTempPaths'], $fileArray['alternativeTempPath'])) {
+                $gifCreator->tempPath = $fileArray['alternativeTempPath'];
+                $GLOBALS['TT']->setTSlogMessage('Set alternativeTempPath: ' . $fileArray['alternativeTempPath']);
+              }
 
-							// checks to see if m (the mask array) is defined
-							if (is_array($maskArray) && $GLOBALS['TYPO3_CONF_VARS']['GFX']['im']) {
-								// Filename:
-								$fI = t3lib_div::split_fileref($theImage);
-								$imgExt = (strtolower($fI['fileext']) == $gifCreator->gifExtension ? $gifCreator->gifExtension : 'jpg');
-								$dest = $gifCreator->tempPath . $hash . '.' . $imgExt;
-								if (!file_exists($dest)) { // Generate!
-									$m_mask = $maskImages['m_mask'];
-									$m_bgImg = $maskImages['m_bgImg'];
-									if ($m_mask && $m_bgImg) {
-										$negate = $GLOBALS['TYPO3_CONF_VARS']['GFX']['im_negate_mask'] ? ' -negate' : '';
+              if (!trim($fileArray['ext'])) {
+                $fileArray['ext'] = 'web';
+              }
+              $options = array();
+              if ($fileArray['maxW']) {
+                $options['maxW'] = $fileArray['maxW'];
+              }
+              if ($fileArray['maxH']) {
+                $options['maxH'] = $fileArray['maxH'];
+              }
+              if ($fileArray['minW']) {
+                $options['minW'] = $fileArray['minW'];
+              }
+              if ($fileArray['minH']) {
+                $options['minH'] = $fileArray['minH'];
+              }
+              if ($fileArray['noScale']) {
+                $options['noScale'] = $fileArray['noScale'];
+              }
 
-										$temp_ext = 'png';
-										if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['im_mask_temp_ext_gif']) { // If ImageMagick version 5+
-											$temp_ext = $gifCreator->gifExtension;
-										}
-										// tkcropthumbs
-										$tempFileInfo = $gifCreator->imageMagickConvert($theImage, $temp_ext, $fileArray['width'], $fileArray['height'], $fileArray['params'], $fileArray['frame'], $options, 0, $tkcropthumbs);
-										if (is_array($tempFileInfo)) {
-											$m_bottomImg = $maskImages['m_bottomImg'];
-											if ($m_bottomImg) {
-												$m_bottomImg_mask = $maskImages['m_bottomImg_mask'];
-											}
-											//	Scaling:	****
-											$tempScale = array();
-											$command = '-geometry ' . $tempFileInfo[0] . 'x' . $tempFileInfo[1] . '!';
-											$command = $this->modifyImageMagickStripProfileParameters($command, $fileArray);
-											$tmpStr = $gifCreator->randomName();
+              if ($fileArray['resolution']) {
+                $options['resolution'] = $fileArray['resolution'];
+              }
+              
+              // checks to see if m (the mask array) is defined
+              if (is_array($maskArray) && $GLOBALS['TYPO3_CONF_VARS']['GFX']['im']) {
+                // Filename:
+                $fI = t3lib_div::split_fileref($theImage);
+                $imgExt = (strtolower($fI['fileext']) == $gifCreator->gifExtension ? $gifCreator->gifExtension : 'jpg');
+                $dest = $gifCreator->tempPath . $hash . '.' . $imgExt;
+                if (!file_exists($dest)) { // Generate!
+                  $m_mask = $maskImages['m_mask'];
+                  $m_bgImg = $maskImages['m_bgImg'];
+                  if ($m_mask && $m_bgImg) {
+                    $negate = $GLOBALS['TYPO3_CONF_VARS']['GFX']['im_negate_mask'] ? ' -negate' : '';
 
-											//	m_mask
-											$tempScale['m_mask'] = $tmpStr . '_mask.' . $temp_ext;
-											$gifCreator->imageMagickExec($m_mask[3], $tempScale['m_mask'], $command . $negate);
-											//	m_bgImg
-											$tempScale['m_bgImg'] = $tmpStr . '_bgImg.' . trim($GLOBALS['TYPO3_CONF_VARS']['GFX']['im_mask_temp_ext_noloss']);
-											$gifCreator->imageMagickExec($m_bgImg[3], $tempScale['m_bgImg'], $command);
+                    $temp_ext = 'png';
+                    if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['im_mask_temp_ext_gif']) { // If ImageMagick version 5+
+                      $temp_ext = $gifCreator->gifExtension;
+                    }
+                    // tkcropthumbs
+                    $tempFileInfo = $gifCreator->imageMagickConvert($theImage, $temp_ext, $fileArray['width'], $fileArray['height'], $fileArray['params'], $fileArray['frame'], $options, 0, $tkcropthumbs);
+                    if (is_array($tempFileInfo)) {
+                      $m_bottomImg = $maskImages['m_bottomImg'];
+                      if ($m_bottomImg) {
+                        $m_bottomImg_mask = $maskImages['m_bottomImg_mask'];
+                      }
+                      //  Scaling:  ****
+                      $tempScale = array();
+                      $command = '-geometry ' . $tempFileInfo[0] . 'x' . $tempFileInfo[1] . '!';
+                      $command = $this->modifyImageMagickStripProfileParameters($command, $fileArray);
+                      $tmpStr = $gifCreator->randomName();
 
-											//	m_bottomImg / m_bottomImg_mask
-											if ($m_bottomImg && $m_bottomImg_mask) {
-												$tempScale['m_bottomImg'] = $tmpStr . '_bottomImg.' . $temp_ext;
-												$gifCreator->imageMagickExec($m_bottomImg[3], $tempScale['m_bottomImg'], $command);
-												$tempScale['m_bottomImg_mask'] = $tmpStr . '_bottomImg_mask.' . $temp_ext;
-												$gifCreator->imageMagickExec($m_bottomImg_mask[3], $tempScale['m_bottomImg_mask'], $command . $negate);
+                      //  m_mask
+                      $tempScale['m_mask'] = $tmpStr . '_mask.' . $temp_ext;
+                      $gifCreator->imageMagickExec($m_mask[3], $tempScale['m_mask'], $command . $negate);
+                      //  m_bgImg
+                      $tempScale['m_bgImg'] = $tmpStr . '_bgImg.' . trim($GLOBALS['TYPO3_CONF_VARS']['GFX']['im_mask_temp_ext_noloss']);
+                      $gifCreator->imageMagickExec($m_bgImg[3], $tempScale['m_bgImg'], $command);
 
-												// BEGIN combining:
-												// The image onto the background
-												$gifCreator->combineExec($tempScale['m_bgImg'], $tempScale['m_bottomImg'], $tempScale['m_bottomImg_mask'], $tempScale['m_bgImg']);
-											}
-											// The image onto the background
-											$gifCreator->combineExec($tempScale['m_bgImg'], $tempFileInfo[3], $tempScale['m_mask'], $dest);
-											// Unlink the temp-images...
-											foreach ($tempScale as $file) {
-												if (@is_file($file)) {
-													unlink($file);
-												}
-											}
-										}
-									}
-								}
-								// Finish off
-								if (($fileArray['reduceColors'] || ($imgExt == 'png' && !$gifCreator->png_truecolor)) && is_file($dest)) {
-									$reduced = $gifCreator->IMreduceColors($dest, t3lib_div::intInRange($fileArray['reduceColors'], 256, $gifCreator->truecolorColors, 256));
-									if (is_file($reduced)) {
-										unlink($dest);
-										rename($reduced, $dest);
-									}
-								}
-								$GLOBALS['TSFE']->tmpl->fileCache[$hash] = $gifCreator->getImageDimensions($dest);
-							} else { // Normal situation:
-								$fileArray['params'] = $this->modifyImageMagickStripProfileParameters($fileArray['params'], $fileArray);
-								// tkcropthumbs
-								$GLOBALS['TSFE']->tmpl->fileCache[$hash] = $gifCreator->imageMagickConvert($theImage, $fileArray['ext'], $fileArray['width'], $fileArray['height'], $fileArray['params'], $fileArray['frame'], $options, 0, $tkcropthumbs);
-								if (($fileArray['reduceColors'] || ($imgExt == 'png' && !$gifCreator->png_truecolor)) && is_file($GLOBALS['TSFE']->tmpl->fileCache[$hash][3])) {
-									$reduced = $gifCreator->IMreduceColors($GLOBALS['TSFE']->tmpl->fileCache[$hash][3], t3lib_div::intInRange($fileArray['reduceColors'], 256, $gifCreator->truecolorColors, 256));
-									if (is_file($reduced)) {
-										unlink($GLOBALS['TSFE']->tmpl->fileCache[$hash][3]);
-										rename($reduced, $GLOBALS['TSFE']->tmpl->fileCache[$hash][3]);
-									}
-								}
-							}
-							$GLOBALS['TSFE']->tmpl->fileCache[$hash]['origFile'] = $theImage;
-							$GLOBALS['TSFE']->tmpl->fileCache[$hash]['origFile_mtime'] = @filemtime($theImage); // This is needed by tslib_gifbuilder, ln 100ff in order for the setup-array to create a unique filename hash.
-							$GLOBALS['TSFE']->tmpl->fileCache[$hash]['fileCacheHash'] = $hash;
-						}
-						$imageResource = $GLOBALS['TSFE']->tmpl->fileCache[$hash];
-					}
+                      //  m_bottomImg / m_bottomImg_mask
+                      if ($m_bottomImg && $m_bottomImg_mask) {
+                        $tempScale['m_bottomImg'] = $tmpStr . '_bottomImg.' . $temp_ext;
+                        $gifCreator->imageMagickExec($m_bottomImg[3], $tempScale['m_bottomImg'], $command);
+                        $tempScale['m_bottomImg_mask'] = $tmpStr . '_bottomImg_mask.' . $temp_ext;
+                        $gifCreator->imageMagickExec($m_bottomImg_mask[3], $tempScale['m_bottomImg_mask'], $command . $negate);
 
-					break;
-			}
-		}
-		$theImage = $GLOBALS['TSFE']->tmpl->getFileName($file);
-		// If image was processed by GIFBUILDER:
-		// ($imageResource indicates that it was processed the regular way)
-		if (!isset($imageResource) && $theImage) {
-			$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
-			/* @var $gifCreator tslib_gifbuilder */
-			$gifCreator->init();
-			$info = $gifCreator->imageMagickConvert($theImage, 'WEB', '', '', '', '', '');
-			$info['origFile'] = $theImage;
-			$info['origFile_mtime'] = @filemtime($theImage); // This is needed by tslib_gifbuilder, ln 100ff in order for the setup-array to create a unique filename hash.
-			$imageResource = $info;
-		}
+                        // BEGIN combining:
+                        // The image onto the background
+                        $gifCreator->combineExec($tempScale['m_bgImg'], $tempScale['m_bottomImg'], $tempScale['m_bottomImg_mask'], $tempScale['m_bgImg']);
+                      }
+                      // The image onto the background
+                      $gifCreator->combineExec($tempScale['m_bgImg'], $tempFileInfo[3], $tempScale['m_mask'], $dest);
+                      // Unlink the temp-images...
+                      foreach ($tempScale as $file) {
+                        if (@is_file($file)) {
+                          unlink($file);
+                        }
+                      }
+                    }
+                  }
+                }
+                // Finish off
+                if (($fileArray['reduceColors'] || ($imgExt == 'png' && !$gifCreator->png_truecolor)) && is_file($dest)) {
+                  $reduced = $gifCreator->IMreduceColors($dest, t3lib_div::intInRange($fileArray['reduceColors'], 256, $gifCreator->truecolorColors, 256));
+                  if (is_file($reduced)) {
+                    unlink($dest);
+                    rename($reduced, $dest);
+                  }
+                }
+                $GLOBALS['TSFE']->tmpl->fileCache[$hash] = $gifCreator->getImageDimensions($dest);
+              } else { // Normal situation:
+                $fileArray['params'] = $this->modifyImageMagickStripProfileParameters($fileArray['params'], $fileArray);
+                // tkcropthumbs
+                $GLOBALS['TSFE']->tmpl->fileCache[$hash] = $gifCreator->imageMagickConvert($theImage, $fileArray['ext'], $fileArray['width'], $fileArray['height'], $fileArray['params'], $fileArray['frame'], $options, 0, $tkcropthumbs);
+                if (($fileArray['reduceColors'] || ($imgExt == 'png' && !$gifCreator->png_truecolor)) && is_file($GLOBALS['TSFE']->tmpl->fileCache[$hash][3])) {
+                  $reduced = $gifCreator->IMreduceColors($GLOBALS['TSFE']->tmpl->fileCache[$hash][3], t3lib_div::intInRange($fileArray['reduceColors'], 256, $gifCreator->truecolorColors, 256));
+                  if (is_file($reduced)) {
+                    unlink($GLOBALS['TSFE']->tmpl->fileCache[$hash][3]);
+                    rename($reduced, $GLOBALS['TSFE']->tmpl->fileCache[$hash][3]);
+                  }
+                }
+              }
+              $GLOBALS['TSFE']->tmpl->fileCache[$hash]['origFile'] = $theImage;
+              $GLOBALS['TSFE']->tmpl->fileCache[$hash]['origFile_mtime'] = @filemtime($theImage); // This is needed by tslib_gifbuilder, ln 100ff in order for the setup-array to create a unique filename hash.
+              $GLOBALS['TSFE']->tmpl->fileCache[$hash]['fileCacheHash'] = $hash;
+            }
+            $imageResource = $GLOBALS['TSFE']->tmpl->fileCache[$hash];
+          }
 
-		// Hook 'getImgResource': Post-processing of image resources
-		if (isset($imageResource)) {
-			foreach ($this->getGetImgResourceHookObjects() as $hookObject) {
-				$imageResource = $hookObject->getImgResourcePostProcess($file, (array) $fileArray, $imageResource, $this);
-			}
-		}
+          break;
+      }
+    }
+    $theImage = $GLOBALS['TSFE']->tmpl->getFileName($file);
+    // If image was processed by GIFBUILDER:
+    // ($imageResource indicates that it was processed the regular way)
+    if (!isset($imageResource) && $theImage) {
+      $gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
+      /* @var $gifCreator tslib_gifbuilder */
+      $gifCreator->init();
+      $info = $gifCreator->imageMagickConvert($theImage, 'WEB', '', '', '', '', '');
+      $info['origFile'] = $theImage;
+      $info['origFile_mtime'] = @filemtime($theImage); // This is needed by tslib_gifbuilder, ln 100ff in order for the setup-array to create a unique filename hash.
+      $imageResource = $info;
+    }
 
-		return $imageResource;
-	}
+    // Hook 'getImgResource': Post-processing of image resources
+    if (isset($imageResource)) {
+      foreach ($this->getGetImgResourceHookObjects() as $hookObject) {
+        $imageResource = $hookObject->getImgResourcePostProcess($file, (array) $fileArray, $imageResource, $this);
+      }
+    }
+
+    return $imageResource;
+  }
 
 }
 
Index: typo3conf/ext/tkcropthumbs/class.ux_tslib_gifBuilder.php
===================================================================
--- typo3conf/ext/tkcropthumbs/class.ux_tslib_gifBuilder.php	(revision 90)
+++ typo3conf/ext/tkcropthumbs/class.ux_tslib_gifBuilder.php	(working copy)
@@ -44,6 +44,9 @@
 	 * @see getImageScale(), typo3/show_item.php, fileList_ext::renderImage(), tslib_cObj::getImgResource(), SC_tslib_showpic::show(), maskImageOntoImage(), copyImageOntoImage(), scale()
 	 */
 	function imageMagickConvert ($imagefile, $newExt = '', $w = '', $h = '', $params = '', $frame = '', $options = '', $mustCreate = 0, $tkcropthumbs = NULL) {
+		  
+		FB::log($options);
+      
 		if ($this->NO_IMAGE_MAGICK) {
 			// Returning file info right away
 			return $this->getImageDimensions($imagefile);
@@ -109,6 +112,22 @@
 				$data = $this->getImageScale($info, $w, $h, $options);
 				$w = $data['origW'];
 				$h = $data['origH'];
+        
+        // check if there is a specific resolution (DPI) set
+        FB::log($options['resolution']);
+        $resolution = intval($options['resolution']);
+        //FB::log($tkcropthumbs);
+        $resolutionFactor = $resolution/72;
+        
+        FB::log($resolutionFactor);
+        //$resolutionFactor = 2;
+        
+        // check if original image is smaller than requested
+        $origImageIsSmaller = ($resolutionFactor && $info[0] <= intval($data[0] * $resolutionFactor) && $info[1] <= intval($data[1] * $resolutionFactor));
+        
+        FB::log("origImageIsSmaller", $origImageIsSmaller);
+         
+        
 				// if no conversion should be performed
 				// this flag is true if the width / height does NOT dictate
 				// the image to be scaled!! (that is if no width / height is
@@ -116,7 +135,9 @@
 				// dimensions or if the option to not scale the image is set)
 				$noScale = (!$w && !$h) || ($data[0] == $info[0] && $data[1] == $info[1]) || $options['noScale'];
 
-				if ($noScale && !$data['crs'] && !$params && !$frame && $newExt == $info[2] && !$mustCreate) {
+         // return original image, if noScale is set OR if original image is smaller than requested (upscale doesnt make sense ...)
+       if (($noScale && !$data['crs'] && !$params && !$frame && $newExt == $info[2] && !$mustCreate) || $origImageIsSmaller) {
+
 					// set the new width and height before returning,
 					// if the noScale option is set
 					if ($options['noScale']) {
@@ -148,9 +169,15 @@
 					}
 					$offsetX = intval(($data[0] - $data['origW']) * ($data['cropH'] + 100) / 200);
 					$offsetY = intval(($data[1] - $data['origH']) * ($data['cropV'] + 100) / 200);
-					$params .= ' -crop ' . $data['origW'] . 'x' . $data['origH'] . '+' . $offsetX . '+' . $offsetY . ' ';
-				}
 
+           // update the width and height, if the resolution is different
+           if ($resolutionFactor != 1) {
+             $params .= ' -crop ' . ($data['origW'] * $resolutionFactor) . 'x' . ($data['origH'] * $resolutionFactor) . '+' . ($offsetX * $resolutionFactor) . '+' . ($offsetY * $resolutionFactor) . ' ';
+           } else {
+             $params .= ' -crop ' . $data['origW'] . 'x' . $data['origH'] . '+' . $offsetX . '+' . $offsetY . ' ';
+           }				
+        }
+        
 				//tkcropthumbs					
 				if ($cropValues) {
 					if (!$data['origW']) {
@@ -174,10 +201,17 @@
 				}
 
 
+         // if rendered in a different resolution, add an additional parameter
+         // and update the command to multiply with the resolution factor
+       if ($resolutionFactor != 1) {
+         $params .= ' -density ' . $resolution . 'x' . $resolution . ' ';
+         $command = $this->scalecmd . ' ' . intval($info[0] * $resolutionFactor) . 'x' . intval($info[1] * $resolutionFactor) . '! ' . $params . ' ';
+         $cropscale = ($data['crs'] ? 'crs-V' . intval($data['cropV'] * $resolutionFactor) . 'H' . intval($data['cropH'] * $resolutionFactor) : '');
+       } else {
+         $command = $this->scalecmd . ' ' . $info[0] . 'x' . $info[1] . '! ' . $params . ' ';
+         $cropscale = ($data['crs'] ? 'crs-V' . $data['cropV'] . 'H' . $data['cropH'] : '');
+       }
 
-				$command = $this->scalecmd . ' ' . $info[0] . 'x' . $info[1] . '! ' . $params . ' ';
-				$cropscale = ($data['crs'] ? 'crs-V' . $data['cropV'] . 'H' . $data['cropH'] : '');
-
 
 				if ($this->alternativeOutputKey) {
 					$theOutputName = t3lib_div::shortMD5($command . $cropscale . basename($imagefile) . $this->alternativeOutputKey . '[' . $frame . ']');
@@ -202,8 +236,15 @@
 				if (file_exists($output)) {
 					$info[3] = $output;
 					$info[2] = $newExt;
-					if ($params) { // params could realisticly change some imagedata!
-						$info = $this->getImageDimensions($info[3]);
+           // params could realisticly change some imagedata!
+         if ($params) {
+           $info = $this->getImageDimensions($info[3]);
+             // update the width and height, if the resolution is different
+             if ($resolutionFactor) {
+               $info[0] = intval($info[0] / $resolutionFactor);
+               $info[1] = intval($info[1] / $resolutionFactor);
+             }
+           
 					}
 					if ($info[2] == $this->gifExtension && !$this->dontCompress) {
 						t3lib_div::gif_compress($info[3], ''); // Compress with IM (lzw) or GD (rle)  (Workaround for the absence of lzw-compression in GD)
